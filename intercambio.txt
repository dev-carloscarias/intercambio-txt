//---------------------------------------------------------------------------------------    
// <copyright file="AppConfig.cs" company="Walmart México y Centroamérica">    
//   Copyright (c) Deny to distribute this code.    
// </copyright>    
// <author>Carlos Agüero Fallas</author>    
//----------------------------------------------------------------------------------------
namespace Walmart.FelGTSoft2000.Mvc.Components
{
    using System.Configuration;
    using System.Diagnostics.CodeAnalysis;
    using Walmart.Common.Helpers;

    /// <summary>
    /// Application config class
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class AppConfig
    {
        #region Fields
        /// <summary>
        /// Client key
        /// </summary>
        private static string clientId;

        /// <summary>
        /// Base service route
        /// </summary>
        private static string sts;

        /// <summary>
        /// Address site
        /// </summary>
        private static string siteAddress;

        /// <summary>
        /// Issuer address
        /// </summary>
        private static string issuerAddress;

        /// <summary>
        /// Client secret
        /// </summary>
        private static string clientSecret;

        /// <summary>
        /// Token endpoint
        /// </summary>
        private static string stsTokenEndpoint;

        /// <summary>
        /// Base service entity base address
        /// </summary>
        private static string webApiEntityAddress;

        /// <summary>
        /// User image information route
        /// </summary>
        private static string imageUserInfoPath;

        /// <summary>
        /// Service base address
        /// </summary>
        private static string webApiBaseAdress;

        /// <summary>
        /// Sitemap file name
        /// </summary>
        private static string mvcSiteMapKey;

        /// <summary>
        /// Active queue service key
        /// </summary>
        private static string activeMQServiceKey;

        /// <summary>
        /// Report server key
        /// </summary>
        private static string reportServer;

        /// <summary>
        /// Report viewer key
        /// </summary>
        private static string reportViewer;

        /// <summary>
        /// Report folder key
        /// </summary>
        private static string reportFolder;

        /// <summary>
        /// Base file transfer service address
        /// </summary>
        private static string webApiSftpBaseAddress;

        /// <summary>
        /// Service base file transfer address
        /// </summary>
        private static string webApiSftpEntityAddress;

        /// <summary>
        /// Report service user
        /// </summary>
        private string reportUser;

        /// <summary>
        /// Report service password
        /// </summary>
        private string reportPass;

        /// <summary>
        /// Report domain key
        /// </summary>
        private string reportDomain;
        #endregion

        #region Properties
        /// <summary>
        /// Gets application client key
        /// </summary>
        public static string ClientId
        {
            get
            {
                //MemoryCacheHelper memory = new MemoryCacheHelper();
                //if (memory.GetValue("stagingClientId") == null)
                //{
                //    clientId = Vault.FindValue("stagingClientId", clientId);
                //}

                if (string.IsNullOrEmpty(clientId))
                {
                    clientId = ConfigurationManager.AppSettings[ConstantsHelper.ClientId];
                }

                return clientId;
            }
        }

        /// <summary>
        /// Gets application client key
        /// </summary>
        public static string Sts
        {
            get
            {
                if (string.IsNullOrEmpty(sts))
                {
                    sts = ConfigurationManager.AppSettings[ConstantsHelper.Sts];
                }

                return sts;
            }
        }

        /// <summary>
        /// Gets address site
        /// </summary>
        public static string SiteAddress
        {
            get
            {
                if (string.IsNullOrEmpty(siteAddress))
                {
                    siteAddress = ConfigurationManager.AppSettings[ConstantsHelper.SiteAddress];
                }

                return siteAddress;
            }
        }

        /// <summary>
        /// Gets issuer address site
        /// </summary>
        public static string IssuerAddress
        {
            get
            {
                if (string.IsNullOrEmpty(issuerAddress))
                {
                    issuerAddress = ConfigurationManager.AppSettings[ConstantsHelper.IssuerUri];
                }

                return issuerAddress;
            }
        }

        /// <summary>
        /// Gets client secret key
        /// </summary>
        public static string ClientSecret
        {
            get
            {
                //MemoryCacheHelper memory = new MemoryCacheHelper();
                //if (memory.GetValue("stagingClientSecret") == null)
                //{
                //    clientSecret = Vault.FindValue("stagingClientSecret", clientSecret);
                //}

                if (string.IsNullOrEmpty(clientSecret))
                {
                    clientSecret = ConfigurationManager.AppSettings[ConstantsHelper.ClientSecret];
                }

                return clientSecret;
            }
        }

        /// <summary>
        /// Gets client secret key
        /// </summary>
        public static string StsTokenEndpoint
        {
            get
            {
                if (string.IsNullOrEmpty(stsTokenEndpoint))
                {
                    stsTokenEndpoint = ConfigurationManager.AppSettings[ConstantsHelper.StsTokenEndpoint];
                }

                return stsTokenEndpoint;
            }
        }

        /// <summary>
        /// Gets base service address
        /// </summary>
        public static string WebApiEntityAddress
        {
            get
            {
                if (string.IsNullOrEmpty(webApiEntityAddress))
                {
                    webApiEntityAddress = ConfigurationManager.AppSettings[ConstantsHelper.WebApiEntityAddress];
                }

                return webApiEntityAddress;
            }
        }

        /// <summary>
        /// Gets image user information
        /// </summary>
        public static string ImageUserInfoPath
        {
            get
            {
                if (string.IsNullOrEmpty(imageUserInfoPath))
                {
                    imageUserInfoPath = ConfigurationManager.AppSettings[ConstantsHelper.ImageUserInfoPath];
                }

                return imageUserInfoPath;
            }
        }

        /// <summary>
        /// Gets web service base address
        /// </summary>
        public static string WebApiBaseAdress
        {
            get
            {
                if (string.IsNullOrEmpty(webApiBaseAdress))
                {
                    webApiBaseAdress = ConfigurationManager.AppSettings[ConstantsHelper.WebApiBaseAdress];
                }

                return webApiBaseAdress;
            }
        }

        /// <summary>
        /// Gets site map key
        /// </summary>
        public static string MvcSiteMapKey
        {
            get
            {
                if (string.IsNullOrEmpty(mvcSiteMapKey))
                {
                    mvcSiteMapKey = ConfigurationManager.AppSettings[ConstantsHelper.MvcSiteMapKey];
                }

                return mvcSiteMapKey;
            }
        }

        /// <summary>
        /// Gets active message queue service file name
        /// </summary>
        public static string ActiveMQServiceKey
        {
            get
            {
                if (string.IsNullOrEmpty(activeMQServiceKey))
                {
                    activeMQServiceKey = ConfigurationManager.AppSettings[ConstantsHelper.ActiveMQServiceKey];
                }

                return activeMQServiceKey;
            }
        }

        /// <summary>
        /// Gets report server name
        /// </summary>
        public static string ReportServer
        {
            get
            {
                if (string.IsNullOrEmpty(reportServer))
                {
                    reportServer = ConfigurationManager.AppSettings[ConstantsHelper.ReportServer];
                }

                return reportServer;
            }
        }

        /// <summary>
        /// Gets report folder name
        /// </summary>
        public static string ReportFolder
        {
            get
            {
                if (string.IsNullOrEmpty(reportFolder))
                {
                    reportFolder = ConfigurationManager.AppSettings[ConstantsHelper.ReportFolder];
                }

                return reportFolder;
            }
        }

        /// <summary>
        /// Gets report application name
        /// </summary>
        public static string ReportViewer
        {
            get
            {
                if (string.IsNullOrEmpty(reportViewer))
                {
                    reportViewer = ConfigurationManager.AppSettings[ConstantsHelper.ReportViewer];
                }

                return reportViewer;
            }
        }

        /// <summary>
        /// Gets file transfer base address
        /// </summary>
        public static string WebApiSftpBaseAddress
        {
            get
            {
                if (string.IsNullOrEmpty(webApiSftpBaseAddress))
                {
                    webApiSftpBaseAddress = ConfigurationManager.AppSettings[ConstantsHelper.WebApiSftpBaseAddress];
                }

                return webApiSftpBaseAddress;
            }
        }

        /// <summary>
        /// Gets web service address
        /// </summary>
        public static string WebApiSftpEntityAddress
        {
            get
            {
                if (string.IsNullOrEmpty(webApiSftpEntityAddress))
                {
                    webApiSftpEntityAddress = ConfigurationManager.AppSettings[ConstantsHelper.WebApiSftpEntityAddress];
                }

                return webApiSftpEntityAddress;
            }
        }

        /// <summary>
        /// Gets report password
        /// </summary>
        public string ReportDomain
        {
            get
            {
                if (string.IsNullOrEmpty(this.reportDomain))
                {
                    this.reportDomain = ConfigurationManager.AppSettings[ConstantsHelper.ReportDomain];
                }

                return this.reportDomain;
            }
        }

        /// <summary>
        /// Gets report user
        /// </summary>
        public string ReportUser
        {
            get
            {
                MemoryCacheHelper memory = new MemoryCacheHelper();
                if (memory.GetValue("stagingReportUser") == null)
                {
                    reportUser = Vault.FindValue("stagingReportUser", reportUser);
                }

            //    if (string.IsNullOrEmpty(this.reportUser))
            //    {
            //        this.reportUser = ConfigurationManager.AppSettings[ConstantsHelper.ReportUser];
            //    }

                return this.reportUser;
            }
        }

        /// <summary>
        /// Gets report password
        /// </summary>
        public string ReportPass
        {
            get
            {
                MemoryCacheHelper memory = new MemoryCacheHelper();
                if (memory.GetValue("stagingReportPassword") == null)
                {
                    reportPass = Vault.FindValue("stagingReportPassword", reportPass);
                }

                //if (string.IsNullOrEmpty(this.reportPass))
                //{
                //    this.reportPass = ConfigurationManager.AppSettings["ReportPassword"];
                //}

                return this.reportPass;
            }
        }

        #endregion

        // Getting the exact role from the config
        public static string FacturadorRoleFromConfig { get; } = ConfigurationManager.AppSettings["FacturadorRole"];
        public static string AdministradorRoleFromConfig { get; } = ConfigurationManager.AppSettings["AdministradorRole"];
        public static string ConsultaRoleFromConfig { get; } = ConfigurationManager.AppSettings["ConsultaRole"];

        //  Getting the role to handle it with the sitemap file
        public static string FacturadorRole => "Facturador";
        public static string AdministradorRole => "Administrador";
        public static string ConsultaRole => "Consulta";
    }
}
