//-----------------------------------------------------------------------    
// <copyright file="Index.cs" company="Walmart México y Centroamérica">    
//   Copyright (c) Deny to distribute this code.    
// </copyright>    
// <author>Carlos Agüero Fallas</author>    
//----------------------------------------------------------------------- 
namespace Walmart.FelGTSoft2000.Mvc.Components
{
    using Microsoft.AspNet.Identity;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Net;
    using System.Net.Http;
    using System.Security.Claims;
    using System.Web;
    #region Using    
    using System.Web.Mvc;
    using Walmart.Common.MvcBreadcrumbs;
    using static iTextSharp.text.pdf.AcroFields;
    #endregion

    /// <summary>
    /// Home controller class
    /// </summary>
    public partial class HomeController : BaseController
    {
        /// <summary>
        /// Initial action result
        /// </summary>
        /// <returns>View model</returns>
        [Breadcrumb(Clear = true, Label = "Home", ResourceType = typeof(Resources.Breadcrumbs.Trail))]
        //[Authorize]
        public ActionResult Index(string code)
        {
           

            if (code != null)
            {
                if (!this.ContextSvc.IsLoggedIn())
                {
                    //Obtener el token de Pingfed
                    var pingfedtk = HttpUtility.HtmlDecode(ObtenerPingfedTkn(code));
                    if (!String.IsNullOrEmpty(pingfedtk))
                    {
                        JToken accessToken = "";
                        JToken idToken = "";
                        JToken expiresIn = "";
                        JToken refreshToken = "";
                        JObject jsonToken = JObject.Parse(pingfedtk);
                        jsonToken.TryGetValue("access_token", out accessToken);
                        jsonToken.TryGetValue("id_token", out idToken);
                        jsonToken.TryGetValue("expires_in", out expiresIn);
                        jsonToken.TryGetValue("refresh_token", out refreshToken);

                        //Obtener los datos del usuario con el token
                        //Obtener datos del Usuario

                        var userInfo = HttpUtility.HtmlDecode(ObtenerUserInfo(accessToken.ToString()));

                        JToken username = "";
                        JToken givenName = "";
                        JToken familyName = "";
                        JToken title = "";
                        JToken domain = "";
                        JToken role = "";
                        JToken email = "";

                        JObject jsonUserInfo = JObject.Parse(userInfo);

                        jsonUserInfo.TryGetValue("sAMAccountName", out username);
                        jsonUserInfo.TryGetValue("given_name", out givenName);
                        jsonUserInfo.TryGetValue("family_name", out familyName);
                        jsonUserInfo.TryGetValue("title", out title);
                        jsonUserInfo.TryGetValue("distinguishedName", out domain);
                        jsonUserInfo.TryGetValue("memberOf", out role);
                        jsonUserInfo.TryGetValue("mail", out email);

                        string[] domains = domain.ToString().Split(',');
                        string domainSplit = "";
                        foreach (var word in domains)
                        {
                            if (word.Contains("DC"))
                            {
                                string[] componentes = word.ToString().Split('=');
                                foreach (var key in componentes)
                                {
                                    if (!key.Contains("DC"))
                                    {
                                        domainSplit = domainSplit + key + ".";
                                    }
                                }
                            }
                        }

                        string roles = "";
                        bool accesRol = false;
                        foreach (var item in role)
                        {
                            // Whenever we need to validate any new role, we must do it in this section
                            if (item.ToString() == AppConfig.AdministradorRoleFromConfig)
                            {
                                roles = AppConfig.AdministradorRole;
                                accesRol = true;
                            } 
                            else 
                            if (item.ToString() == AppConfig.FacturadorRoleFromConfig)
                            {
                                roles = AppConfig.FacturadorRole;
                                accesRol = true;
                            } 
                            else
                            if (item.ToString() == AppConfig.ConsultaRoleFromConfig)
                            {
                                roles = AppConfig.ConsultaRole;
                                accesRol = true;
                            }
                        }

                        if (accesRol)
                        {
                            var claims = new List<Claim>()
                            {
                               new Claim(ClaimTypes.Name,  accessToken.ToString()),
                               new Claim("accesstoken", accessToken.ToString()),
                               new Claim("refreshtoken", refreshToken.ToString()),
                               new Claim("name", username.ToString()),
                               new Claim("username", username.ToString()),
                               new Claim("given_name", givenName.ToString()),
                               new Claim("family_name", familyName.ToString()),
                               new Claim("title", title.ToString()),
                               new Claim("domain", domainSplit.ToString()),
                               new Claim("role", roles),
                               new Claim("email", email.ToString()),
                               new Claim("usercountry", "SV"),
                               //new Claim("usercountry", "SV"),
                            };

                            var claimIdenties = new ClaimsIdentity(claims, DefaultAuthenticationTypes.ApplicationCookie);
                            var ctx = Request.GetOwinContext();
                            var authenticationManager = ctx.Authentication;
                            authenticationManager.SignIn(new Microsoft.Owin.Security.AuthenticationProperties() { IsPersistent = false }, claimIdenties);
                            return Redirect(AppConfig.SiteAddress);
                        }
                    }
                }
                else
                {
                    return this.View();
                }
            }
            
            return Redirect(AppConfig.Sts + "/as/authorization.oauth2?redirect_uri=" + AppConfig.SiteAddress + "&client_id=" + AppConfig.ClientId + "&response_type=code&scope=openid%20profile%20full");

        }

        public static String ObtenerPingfedTkn(String code)
        {
            string tokenEndpoint = AppConfig.Sts + "/as/token.oauth2";

            var values = new Dictionary<string, string>
             {
                 { "grant_type", "authorization_code" },
                 { "code" , code },
                 { "client_id", AppConfig.ClientId},
                 { "client_secret", AppConfig.ClientSecret },
                 { "redirect_uri", AppConfig.SiteAddress}
             };

            HttpClient tokenClient = new HttpClient();
            var content = new FormUrlEncodedContent(values);
            var response = tokenClient.PostAsync(tokenEndpoint, content).Result;

            if (response.IsSuccessStatusCode)
            {
                var responseContent = response.Content;
                return HttpUtility.HtmlEncode(responseContent.ReadAsStringAsync().Result);
            }
            return "";
        }

        public static String ObtenerUserInfo(String accessToken)
        {
            using (WebClient client = new WebClient())
            {
                string addressOpenid = AppConfig.Sts + "/idp/userinfo.openid";
                //somehow get token
                client.Headers.Add("Authorization", "Bearer " + accessToken);
                string userinfo = client.DownloadString(addressOpenid);
                return HttpUtility.HtmlEncode(userinfo);
            }
        }

        public ActionResult LogOff()
        {
            //Crerrar la sesión borrar las cookies

            return this.View();
        }


    }
}
