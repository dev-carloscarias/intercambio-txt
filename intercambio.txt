//ROUTECONFIG
//-----------------------------------------------------------------------    
// <copyright file="RouteConfig.cs" company="Walmart México y Centroamérica">    
//   Copyright (c) Deny to distribute this code.    
// </copyright>    
// <author>Carlos Agüero Fallas</author>    
//----------------------------------------------------------------------- 
namespace Walmart.FelGTSoft2000.Mvc.Configs
{
    #region Using
    using System.Diagnostics.CodeAnalysis;
    using System.Web.Mvc;
    using System.Web.Routing;
    #endregion

    /// <summary>
    /// Route config class
    /// </summary>
    [ExcludeFromCodeCoverage]
    public static class RouteConfig
    {
        /// <summary>
        /// Register routes
        /// </summary>
        /// <param name="routes">Routes list</param>
        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");
            routes.IgnoreRoute("{resource}.aspx/{*pathInfo}");

            routes.MapRoute(
                name: "Default",
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional });
        }
    }
}


//Startup.cs
//-----------------------------------------------------------------------    
// <copyright file="Startup.cs" company="Walmart México y Centroamérica">    
//   Copyright (c) Deny to distribute this code.    
// </copyright>    
// <author>Carlos Agüero Fallas</author>    
//-----------------------------------------------------------------------  
using Microsoft.Owin;

[assembly: OwinStartup(typeof(Walmart.FelGTSoft2000.Mvc.Configs.Startup))]

namespace Walmart.FelGTSoft2000.Mvc.Configs
{
    using Owin;

    /// <summary>
    /// Startup class
    /// </summary>
    public sealed partial class Startup
    {
        /// <summary>
        /// Configuration builder
        /// </summary>
        /// <param name="app">Application builder</param>
        public static void Configuration(IAppBuilder app)
        {
            ConfigureAuth(app);
        }
    }
}

//App_Start/startup.cs
//-----------------------------------------------------------------------    
// <copyright file="Startup.cs" company="Walmart México y Centroamérica">    
//   Copyright (c) Deny to distribute this code.    
// </copyright>    
// <author>Carlos Agüero Fallas</author>    
//-----------------------------------------------------------------------
namespace Walmart.FelGTSoft2000.Mvc.Configs
{
    #region Using
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Globalization;
    using System.IdentityModel.Tokens;
    using System.Security.Claims;
    using System.Text;
    using System.Threading.Tasks;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using Common.Helpers;
    using Components;
    using IdentityModel.Client;
    using Microsoft.AspNet.Identity;
    using Microsoft.IdentityModel.Protocols;
    using Microsoft.Owin;
    using Microsoft.Owin.Security;
    using Microsoft.Owin.Security.Cookies;
    using Microsoft.Owin.Security.Notifications;
    using Microsoft.Owin.Security.OpenIdConnect;
    using Owin;
    #endregion

    /// <summary>
    /// Startup partial class
    /// </summary>
    [ExcludeFromCodeCoverage]
    public partial class Startup
    {


        /// <summary>
        /// Prevents a default instance of the <see cref="Startup" /> class from being created.
        /// </summary>
        private Startup(HttpContextBase httpContext)
        {
            httpContext.Response.AddHeader("Strict-Transport-Security",  "max-age=31536000; includeSubDomains = true; redirectHttpToHttps = true");
        }

        /// <summary>
        /// Configure authorization
        /// </summary>
        /// <param name="app">Application builder</param>
        public static void ConfigureAuth(IAppBuilder app)
        {
            JwtSecurityTokenHandler.InboundClaimTypeMap = new Dictionary<string, string>();
            AntiForgeryConfig.UniqueClaimTypeIdentifier = IdentityModel.JwtClaimTypes.Name;
            app.UseKentorOwinCookieSaver();

            app.UseCookieAuthentication(new CookieAuthenticationOptions
            {
                AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie,
                ExpireTimeSpan = TimeSpan.FromMinutes(1500),
                SlidingExpiration = true,
                LogoutPath = new PathString("/")
            });
        }

        /// <summary>
        /// Add protected cookie
        /// </summary>
        /// <param name="tokenId">Token id</param>
        private static void ProtectTokenId(string tokenId)
        {
            CookieHelper.CreateCookie("token_id", Convert.ToBase64String(MachineKey.Protect(Encoding.UTF8.GetBytes(tokenId))), CookieHelper.EnumCookieInterval.Day, TimeSpan.FromDays(1).Days);
        }

        /// <summary>
        /// Get a unprotected cookie
        /// </summary>
        /// <param name="tokenName">Cookie name</param>
        /// <returns>A unprotected cookie</returns>
        private static string UnProtectTokenId(string tokenName)
        {
            return Encoding.UTF8.GetString(MachineKey.Unprotect(Convert.FromBase64String(CookieHelper.ReadCookie(tokenName))));
        }
    }
}
